# Generated by Django 4.0.5 on 2022-07-29 12:24

import datetime
from django.conf import settings
import django.contrib.auth.models
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
from django.utils.timezone import utc
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='email adress')),
                ('telephone', models.CharField(max_length=20, validators=[django.core.validators.RegexValidator(message="Le numéro renseigné n'est pas valide", regex='^\\+?1?\\d{9}$')])),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'db_table': 'USER',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Application',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nom_app', models.CharField(max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='Client',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('photo_client', models.ImageField(blank=True, null=True, upload_to='')),
                ('nom_client', models.CharField(max_length=70)),
                ('prenom_client', models.CharField(max_length=70)),
                ('tel_client', models.CharField(max_length=15, validators=[django.core.validators.RegexValidator(message="Le numéro renseigné n'est pas valide", regex='^\\+?1?\\d{9}$')])),
                ('email', models.EmailField(blank=True, max_length=50, null=True)),
                ('etat_compte', models.BooleanField(default=False)),
                ('est_bloque', models.BooleanField(default=True)),
                ('adresse_client', models.CharField(blank=True, max_length=200, null=True)),
                ('code_client', models.CharField(blank=True, max_length=20, null=True)),
                ('date_creation', models.DateTimeField(default=datetime.datetime(2022, 7, 29, 12, 24, 24, 631445, tzinfo=utc))),
            ],
            options={
                'db_table': 'CLIENT',
            },
        ),
        migrations.CreateModel(
            name='Contrat',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('numero_contrat', models.CharField(max_length=50)),
                ('date_eq', models.DateField(auto_now_add=True)),
                ('type_compteur', models.CharField(max_length=15)),
                ('puissance', models.FloatField(default=10)),
                ('unites', models.FloatField(default=1.0)),
                ('valeur_en_cfa', models.IntegerField()),
                ('coeff', models.FloatField()),
            ],
            options={
                'db_table': 'CONTRAT',
                'ordering': ('-date_eq',),
            },
        ),
        migrations.CreateModel(
            name='CreditCompteur',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('montant_recharge', models.FloatField(default=0.0)),
                ('code_recharge', models.CharField(default='jffgfyuee', max_length=30, unique=True)),
                ('date_recharge', models.DateTimeField(auto_now_add=True)),
                ('code_utilise', models.BooleanField(default=False)),
            ],
            options={
                'db_table': 'CREDITCOMPTEUR',
            },
        ),
        migrations.CreateModel(
            name='CreditSEEG',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('credit_total', models.FloatField(default=0.0)),
                ('montant_recharge', models.FloatField(default=0.0)),
                ('date_recharge', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'CREDITSEEG',
            },
        ),
        migrations.CreateModel(
            name='GWS',
            fields=[
                ('gw_id', models.CharField(max_length=50, primary_key=True, serialize=False)),
                ('nom_gateway', models.CharField(blank=True, max_length=50, null=True)),
                ('adr_gw', models.CharField(blank=True, max_length=200, null=True)),
                ('lat_gw', models.FloatField(default=0.0)),
                ('lon_gw', models.FloatField(default=0.0)),
                ('description', models.TextField(blank=True, null=True)),
                ('date_creation', models.DateField(auto_now_add=True)),
                ('derniere_modif', models.DateField(auto_now=True)),
                ('actif', models.BooleanField(default=True)),
            ],
            options={
                'db_table': 'GATEWAY',
            },
        ),
        migrations.CreateModel(
            name='InfoSignal',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('jour', models.DateField()),
                ('mois', models.CharField(blank=True, max_length=12, null=True)),
                ('heure', models.TimeField()),
                ('rssi', models.FloatField()),
                ('snr', models.FloatField()),
                ('freq', models.FloatField()),
                ('dr', models.IntegerField()),
                ('adr', models.BooleanField()),
                ('classe', models.CharField(max_length=2, verbose_name='class')),
                ('fCnt', models.IntegerField()),
                ('fPort', models.IntegerField()),
                ('confirmed', models.BooleanField()),
                ('data', models.CharField(max_length=100)),
                ('date_creation', models.DateTimeField(default=datetime.datetime(2022, 7, 29, 12, 24, 24, 635065, tzinfo=utc))),
                ('liste_gateways', models.CharField(max_length=200)),
                ('gwid', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='donnees', to='elec_meter.gws')),
            ],
            options={
                'db_table': 'INFOSIGNAL',
                'ordering': ('jour', 'heure'),
            },
        ),
        migrations.CreateModel(
            name='Machine',
            fields=[
                ('devName', models.CharField(blank=True, max_length=50, null=True)),
                ('devEUI', models.CharField(max_length=50, primary_key=True, serialize=False)),
                ('type_machine', models.CharField(default='Mono phasé', max_length=30)),
                ('code_secret', models.CharField(blank=True, max_length=10, null=True)),
                ('date_creation', models.DateField(auto_now_add=True)),
                ('derniere_modif', models.DateField(auto_now=True)),
                ('actif', models.BooleanField(default=True)),
                ('est_fournisseur', models.BooleanField(default=False)),
                ('client', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='compteurs', to='elec_meter.client')),
                ('contrat', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='meters', to='elec_meter.contrat')),
            ],
            options={
                'db_table': 'MACHINE',
            },
        ),
        migrations.CreateModel(
            name='Province',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nom_province', models.CharField(max_length=50)),
                ('code_province', models.CharField(max_length=10)),
            ],
            options={
                'db_table': 'PROVINCE',
            },
        ),
        migrations.CreateModel(
            name='Ville',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nom_ville', models.CharField(max_length=100)),
                ('province', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='elec_meter.province')),
            ],
            options={
                'db_table': 'VILLE',
            },
        ),
        migrations.CreateModel(
            name='Transfert',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('montant_transfert', models.FloatField()),
                ('date_transfert', models.DateTimeField(auto_now_add=True)),
                ('dest_transfert', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='dest_transferts', to='elec_meter.machine')),
                ('exp_transfert', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='exp_transferts', to='elec_meter.machine')),
            ],
            options={
                'db_table': 'TRANSFERT',
            },
        ),
        migrations.CreateModel(
            name='Transac',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('jour', models.DateField()),
                ('heure', models.TimeField()),
                ('unites_expediteur', models.FloatField(default=0.0)),
                ('montant', models.FloatField(default=0.0)),
                ('equivalence_unites', models.FloatField(default=0.0)),
                ('etat', models.CharField(default='', max_length=10)),
                ('comment', models.CharField(blank=True, max_length=50, null=True)),
                ('beneficiaire', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='elec_meter.machine')),
                ('expediteur', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='transactions', to='elec_meter.machine')),
            ],
            options={
                'db_table': 'TRANSACTION',
            },
        ),
        migrations.CreateModel(
            name='Retrait',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('montant', models.FloatField(default=0.0)),
                ('jour_retrait', models.DateField(default=datetime.datetime(2022, 7, 29, 14, 24, 24, 635065))),
                ('heure_retrait', models.TimeField(default='14:24:24')),
                ('etat', models.CharField(blank=True, max_length=10, null=True)),
                ('equivalent_montant_unites', models.FloatField(default=0.0)),
                ('type_retrait', models.IntegerField()),
                ('compteur_client', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='elec_meter.machine')),
                ('compteur_trader', models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, related_name='trader', to='elec_meter.machine')),
            ],
            options={
                'db_table': 'RETRAIT',
                'ordering': ('-jour_retrait',),
            },
        ),
        migrations.CreateModel(
            name='Reporting',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('command_code', models.CharField(blank=True, max_length=4, null=True)),
                ('total_positive_active_energy', models.FloatField(default=0.0)),
                ('active_power_rate_tip', models.FloatField(default=0.0)),
                ('active_power_rate_peak', models.FloatField(default=0.0)),
                ('active_power_rate_flat', models.FloatField(default=0.0)),
                ('active_power_rate_valley', models.FloatField(default=0.0)),
                ('voltage', models.FloatField(blank=True, default=0.0, null=True)),
                ('voltage_a', models.FloatField(blank=True, default=0.0, null=True)),
                ('voltage_b', models.FloatField(blank=True, default=0.0, null=True)),
                ('voltage_c', models.FloatField(blank=True, default=0.0, null=True)),
                ('current', models.FloatField(blank=True, default=0.0, null=True)),
                ('current_a', models.FloatField(blank=True, default=0.0, null=True)),
                ('current_b', models.FloatField(blank=True, default=0.0, null=True)),
                ('current_c', models.FloatField(blank=True, default=0.0, null=True)),
                ('equipment_statut', models.CharField(blank=True, max_length=4, null=True)),
                ('alarm_statut', models.CharField(blank=True, max_length=4, null=True)),
                ('downlink_signal_strength', models.CharField(blank=True, max_length=4, null=True)),
                ('downlink_signal_to_noise_ratio', models.FloatField(blank=True, default=0.0, null=True)),
                ('downlink_snr', models.CharField(blank=True, max_length=4, null=True)),
                ('frame_identification', models.CharField(blank=True, max_length=4, null=True)),
                ('infos_signal', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='reporting_data', to='elec_meter.infosignal')),
            ],
            options={
                'db_table': 'REPORTING',
            },
        ),
        migrations.CreateModel(
            name='RechargeEtTransfert',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('montant', models.FloatField(default=0.0)),
                ('effectue_le', models.DateTimeField(auto_now_add=True)),
                ('type_transaction', models.CharField(default='Inconnu', max_length=30)),
                ('compteur', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='elec_meter.machine')),
                ('recharge', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='elec_meter.creditcompteur')),
                ('transfert', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='elec_meter.transac')),
            ],
            options={
                'db_table': 'RECHARGEETTRANSFERT',
            },
        ),
        migrations.CreateModel(
            name='PorteMonaie',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('devise', models.FloatField()),
                ('compteur', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='elec_meter.machine')),
            ],
        ),
        migrations.CreateModel(
            name='Notif',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type_notif', models.CharField(max_length=50)),
                ('date_creation', models.DateTimeField(auto_now_add=True)),
                ('compteur', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='elec_meter.machine')),
            ],
            options={
                'db_table': 'NOTIF',
            },
        ),
        migrations.AddField(
            model_name='machine',
            name='ville_machine',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='machines', to='elec_meter.ville'),
        ),
        migrations.AddField(
            model_name='infosignal',
            name='machine',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='signaux', to='elec_meter.machine'),
        ),
        migrations.CreateModel(
            name='Identifiants',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('pdw', models.CharField(blank=True, max_length=100, null=True)),
                ('code', models.CharField(blank=True, max_length=6, null=True)),
                ('date_gen', models.DateTimeField(auto_now_add=True)),
                ('client', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='identifiants', to='elec_meter.client')),
            ],
            options={
                'db_table': 'IDENTIFIANTS',
            },
        ),
        migrations.CreateModel(
            name='Historique',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('energie_active', models.FloatField()),
                ('unites', models.FloatField(default=0.0)),
                ('tension', models.FloatField(default=0.0)),
                ('tension_a', models.FloatField(default=0.0)),
                ('tension_b', models.FloatField(default=0.0)),
                ('tension_c', models.FloatField(default=0.0)),
                ('courant', models.FloatField(default=0.0)),
                ('courant_a', models.FloatField(default=0.0)),
                ('courant_b', models.FloatField(default=0.0)),
                ('courant_c', models.FloatField(default=0.0)),
                ('statut_equipement', models.CharField(blank=True, max_length=15, null=True)),
                ('statut_alarme', models.CharField(blank=True, max_length=15, null=True)),
                ('intensite_downlink', models.CharField(blank=True, max_length=15, null=True)),
                ('snr', models.CharField(blank=True, max_length=15, null=True)),
                ('frame_identification', models.CharField(blank=True, max_length=15, null=True)),
                ('date_creation', models.DateTimeField(default=django.utils.timezone.now)),
                ('infos_signal', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='elec_meter.infosignal')),
                ('machine', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='historiques', to='elec_meter.machine')),
            ],
            options={
                'db_table': 'HISTORIQUE',
                'ordering': ('-infos_signal__heure',),
            },
        ),
        migrations.AddField(
            model_name='gws',
            name='ville_gw',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='elec_meter.ville'),
        ),
        migrations.CreateModel(
            name='EtatCompteur',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('etat_physique', models.CharField(choices=[('nouveau', 'nouveau'), ('bon', 'bon'), ('mauvais', 'mauvais'), ('defectueux', 'defectueux')], default='nouveau', max_length=30)),
                ('etat_abonnement', models.CharField(choices=[('libre', 'libre'), ('lie', 'lie')], default='libre', max_length=30)),
                ('etat_valve', models.CharField(choices=[('on', 'on'), ('off', 'off'), ('indefini', 'indefini')], default='indefini', max_length=20)),
                ('compteur', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='etat', to='elec_meter.machine')),
            ],
            options={
                'db_table': 'ETATCOMPTEUR',
            },
        ),
        migrations.CreateModel(
            name='Emprunt',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('montant', models.FloatField()),
                ('avance', models.FloatField(default=0.0)),
                ('reste', models.FloatField(default=0.0)),
                ('dette_solde', models.BooleanField(default=False)),
                ('etat', models.CharField(default='echec', max_length=10)),
                ('date_emprunt', models.DateTimeField(auto_now_add=True)),
                ('c_emprunteur', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='emprunteur', to='elec_meter.machine')),
                ('c_preteur', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='preteur', to='elec_meter.machine')),
            ],
        ),
        migrations.AddField(
            model_name='creditcompteur',
            name='compteur',
            field=models.ForeignKey(default='8cf9572000023509', on_delete=django.db.models.deletion.CASCADE, related_name='credits', to='elec_meter.machine'),
        ),
        migrations.CreateModel(
            name='Connexion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_connexion', models.DateTimeField(blank=True, null=True)),
                ('date_deconnexion', models.DateTimeField(blank=True, null=True)),
                ('client', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='elec_meter.client')),
            ],
            options={
                'db_table': 'CONNEXION',
            },
        ),
        migrations.CreateModel(
            name='CompteurAssocie',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nom_compteur', models.CharField(max_length=100)),
                ('num_compteur', models.CharField(max_length=100)),
                ('client', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='elec_meter.client')),
            ],
            options={
                'db_table': 'COMPTEURASSOCIE',
                'ordering': ('nom_compteur',),
            },
        ),
        migrations.AddField(
            model_name='client',
            name='ville_client',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='elec_meter.ville'),
        ),
        migrations.CreateModel(
            name='Agent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('photo_agent', models.ImageField(blank=True, null=True, upload_to='agents')),
                ('nom_agent', models.CharField(blank=True, max_length=70, null=True)),
                ('prenom_agent', models.CharField(blank=True, max_length=70, null=True)),
                ('adr_agent', models.CharField(blank=True, max_length=200, null=True)),
                ('profile', models.CharField(blank=True, choices=[('administrateur', 'Administrateur'), ('operateur', 'operateur'), ('super_admin', 'super_admin')], max_length=15, null=True)),
                ('matricule', models.CharField(blank=True, max_length=30, null=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='agent', to=settings.AUTH_USER_MODEL)),
                ('ville_agent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='elec_meter.ville')),
            ],
            options={
                'db_table': 'AGENT',
            },
        ),
        migrations.CreateModel(
            name='Abonnement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('num_abonnement', models.CharField(max_length=20, null=True)),
                ('adresse', models.CharField(blank=True, max_length=200, null=True)),
                ('point_service', models.CharField(blank=True, max_length=200, null=True)),
                ('lat_machine', models.FloatField(default=0.0)),
                ('lon_machine', models.FloatField(default=0.0)),
                ('date_creation', models.DateField(default=datetime.datetime(2022, 7, 29, 12, 24, 24, 635065, tzinfo=utc))),
                ('derniere_modif', models.DateField(auto_now=True)),
                ('client', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='abonnements', to='elec_meter.client')),
                ('compteur', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='abonnement', to='elec_meter.machine')),
            ],
            options={
                'db_table': 'ABONNEMENT',
            },
        ),
    ]
